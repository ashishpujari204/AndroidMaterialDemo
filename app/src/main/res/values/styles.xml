<resources>
    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <!-- Customize your theme here. -->
        <!-- Global color attributes -->
        <item name="colorPrimary">@color/color_primary</item>
        <item name="colorPrimaryVariant">@color/color_primary_variant</item>
        <item name="colorOnPrimary">@color/color_on_primary</item>
        <item name="colorSecondary">@color/color_secondary</item>
        <item name="colorSecondaryVariant">@color/color_secondary_variant</item>
        <item name="colorOnSecondary">@color/color_on_secondary</item>
        <item name="colorError">@color/color_error</item>
        <item name="colorOnError">@color/color_on_error</item>
        <item name="colorSurface">@color/color_surface</item>
        <item name="colorOnSurface">@color/color_on_surface</item>
        <item name="android:colorBackground">@color/color_background</item>
        <item name="colorOnBackground">@color/color_on_background</item>
        <item name="android:statusBarColor">@color/color_status_bar</item>
        <!-- Global type attributes -->
        <item name="textAppearanceButton">@style/AppTextAppearance.Button</item>
        <item name="fontFamily">@font/roboto_mono</item>
        <item name="android:fontFamily">@font/roboto_mono</item>
        <!-- Global shape attributes -->
        <item name="shapeAppearanceSmallComponent">@style/AppShapeAppearance.SmallComponent</item>
        <item name="shapeAppearanceMediumComponent">@style/AppShapeAppearance.MediumComponent</item>
        <item name="shapeAppearanceLargeComponent">@style/AppShapeAppearance.LargeComponent</item>
        <item name="materialButtonStyle">@style/AppButton</item>
        <!-- Text Field widget style attribute -->
        <item name="textInputStyle">@style/AppTextField</item>
    </style>

    <style name="AppTextAppearance.Button" parent="TextAppearance.MaterialComponents.Button">
        <item name="android:textAllCaps">false</item>
    </style>

    <style name="AppShapeAppearance.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">8dp</item>
    </style>

    <style name="AppShapeAppearance.MediumComponent" parent="ShapeAppearance.MaterialComponents.MediumComponent">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">8dp</item>
    </style>

    <style name="AppShapeAppearance.LargeComponent" parent="ShapeAppearance.MaterialComponents.LargeComponent">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">8dp</item>
    </style>



    <style name="AppButton" parent="Widget.MaterialComponents.Button">
        <item name="backgroundTint">?attr/colorSecondary</item>
        <item name="android:textColor">@color/button_text_color</item>
        <item name="iconTint">@color/button_text_color</item>
        <item name="rippleColor">@color/button_ripple_color</item>
    </style>

    <style name="AppTextField" parent="Widget.MaterialComponents.TextInputLayout.FilledBox">
        <item name="boxBackgroundColor">@color/text_field_background</item>
    </style>
    <style name="AppTheme.ExposedDropdownMenu"
        parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox.ExposedDropdownMenu">
        <!-- color of box ONLY, not dropdown -->
        <!-- the box outline color depending on state
             (default, enabled, hovered, focused, but NOT error) -->
        <item name="boxStrokeColor">@color/material_spinner_box</item>
        <!-- the box outline color just for errors -->
        <item name="boxStrokeErrorColor">@color/color_error</item>
        <!-- enable 8dp space below the box for error message -->
        <item name="errorEnabled">true</item>
        <!-- the hint INSIDE the box, before focusing the TextInputEditText -->
        <item name="android:textColorHint">@color/color_on_surface</item>
        <!-- the hint ON TOP of the box, when the TextInputEditText is focused -->
        <item name="hintTextColor">@color/color_primary</item>
        <!-- Gain access to additional styling for the child AutoCompleteTextView,
             which includes this spinner's dropdown/popup menu -->
        <item name="materialThemeOverlay">@style/AppTheme.ExposedDropdownMenu.MaterialThemeOverlay</item>
    </style>

    <!-- customization of the material theme for use as
         an overlay for the ExposedDropdownMenu style  -->
    <style name="AppTheme.ExposedDropdownMenu.MaterialThemeOverlay"
        parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <!-- background color of dropdown (popup) items -->
        <item name="colorSurface">#444444</item>
        <!--
         When this overlay is applied, the AutoCompleteTextView
         loses padding. Luckily, we can restore it by defining
         a style that should be applied to all AutoCompletTextView(s)
         in this theme/overlay
         -->
        <item name="autoCompleteTextViewStyle">@style/AppTheme.ExposedDropdownMenu.AutoCompleteStyle</item>
    </style>

    <!-- style the AutoCompleteTextView of our material spinner -->
    <style name="AppTheme.ExposedDropdownMenu.AutoCompleteStyle">
        <!-- restore padding to sanity -->
        <item name="android:padding">14dp</item>
        <item name="android:textColor">@color/color_on_surface</item>
    </style>
    <style name="MaterialSpinnerItem" parent="Widget.AppCompat.TextView">
        <item name="android:color">@color/color_on_surface</item>
        <item name="android:textColor">@color/color_on_surface</item>
        <item name="android:textSize">20sp</item>
        <item name="android:ellipsize">end</item>
        <item name="android:maxLines">1</item>
        <item name="android:padding">14dp</item>
    </style>

</resources>